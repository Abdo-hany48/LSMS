// <auto-generated />
using LSMS.data_access;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LSMS.data_access
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LSMS.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("LSMS.Models.Course", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LSMS.Models.CourseProfessor", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "ProfessorId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("CourseProfessor");
                });

            modelBuilder.Entity("LSMS.Models.CourseTeachingAssistant", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("teachingAssistantId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "teachingAssistantId");

                    b.HasIndex("teachingAssistantId");

                    b.ToTable("CourseTeachingAssistant");
                });

            modelBuilder.Entity("LSMS.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CourseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HallID")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseID");

                    b.HasIndex("HallID");

                    b.HasIndex("ProfessorID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("LSMS.Models.Hall", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("LSMS.Models.Professor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SSN")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("LSMS.Models.ProfessorTeachingAssistant", b =>
                {
                    b.Property<int>("TeachingAssistantId")
                        .HasColumnType("int");

                    b.Property<int>("ProffessorId")
                        .HasColumnType("int");

                    b.HasKey("TeachingAssistantId", "ProffessorId");

                    b.HasIndex("ProffessorId");

                    b.ToTable("ProfessorTeachingAssistant");
                });

            modelBuilder.Entity("LSMS.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CourseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HallID")
                        .HasColumnType("int");

                    b.Property<int>("TeachingAssistantID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseID");

                    b.HasIndex("HallID");

                    b.HasIndex("TeachingAssistantID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("LSMS.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LSMS.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("LSMS.Models.StudentGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGroup");
                });

            modelBuilder.Entity("LSMS.Models.StudentSection", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("SectionId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSection");
                });

            modelBuilder.Entity("LSMS.Models.TeachingAssistant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SSN")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("TeachingAssistants");
                });

            modelBuilder.Entity("LSMS.Models.CourseProfessor", b =>
                {
                    b.HasOne("LSMS.Models.Course", "Courses")
                        .WithMany("CourseProfessors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSMS.Models.Professor", "Professors")
                        .WithMany("CourseProfessors")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("Professors");
                });

            modelBuilder.Entity("LSMS.Models.CourseTeachingAssistant", b =>
                {
                    b.HasOne("LSMS.Models.Course", "Courses")
                        .WithMany("courseTeachingAssistants")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSMS.Models.TeachingAssistant", "TeachingAssistants")
                        .WithMany("courseTeachingAssistants")
                        .HasForeignKey("teachingAssistantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("TeachingAssistants");
                });

            modelBuilder.Entity("LSMS.Models.Group", b =>
                {
                    b.HasOne("LSMS.Models.Course", "Course")
                        .WithMany("groups")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSMS.Models.Hall", "Hall")
                        .WithMany("groups")
                        .HasForeignKey("HallID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSMS.Models.Professor", "Professor")
                        .WithMany("groups")
                        .HasForeignKey("ProfessorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Hall");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("LSMS.Models.ProfessorTeachingAssistant", b =>
                {
                    b.HasOne("LSMS.Models.Professor", "Professors")
                        .WithMany("ProfessorTeachingAssistants")
                        .HasForeignKey("ProffessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSMS.Models.TeachingAssistant", "TeachingAssistants")
                        .WithMany("professorTeachingAssistants")
                        .HasForeignKey("TeachingAssistantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professors");

                    b.Navigation("TeachingAssistants");
                });

            modelBuilder.Entity("LSMS.Models.Section", b =>
                {
                    b.HasOne("LSMS.Models.Course", "Course")
                        .WithMany("sections")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSMS.Models.Hall", "Hall")
                        .WithMany("sections")
                        .HasForeignKey("HallID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSMS.Models.TeachingAssistant", "TeachingAssistant")
                        .WithMany("sections")
                        .HasForeignKey("TeachingAssistantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Hall");

                    b.Navigation("TeachingAssistant");
                });

            modelBuilder.Entity("LSMS.Models.StudentCourse", b =>
                {
                    b.HasOne("LSMS.Models.Course", "Courses")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSMS.Models.Student", "Students")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("LSMS.Models.StudentGroup", b =>
                {
                    b.HasOne("LSMS.Models.Group", "Group")
                        .WithMany("StudentGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSMS.Models.Student", "Student")
                        .WithMany("StudentGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LSMS.Models.StudentSection", b =>
                {
                    b.HasOne("LSMS.Models.Section", "Section")
                        .WithMany("StudentSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSMS.Models.Student", "Student")
                        .WithMany("StudentSections")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LSMS.Models.Course", b =>
                {
                    b.Navigation("CourseProfessors");

                    b.Navigation("StudentCourses");

                    b.Navigation("courseTeachingAssistants");

                    b.Navigation("groups");

                    b.Navigation("sections");
                });

            modelBuilder.Entity("LSMS.Models.Group", b =>
                {
                    b.Navigation("StudentGroups");
                });

            modelBuilder.Entity("LSMS.Models.Hall", b =>
                {
                    b.Navigation("groups");

                    b.Navigation("sections");
                });

            modelBuilder.Entity("LSMS.Models.Professor", b =>
                {
                    b.Navigation("CourseProfessors");

                    b.Navigation("ProfessorTeachingAssistants");

                    b.Navigation("groups");
                });

            modelBuilder.Entity("LSMS.Models.Section", b =>
                {
                    b.Navigation("StudentSections");
                });

            modelBuilder.Entity("LSMS.Models.Student", b =>
                {
                    b.Navigation("StudentCourses");

                    b.Navigation("StudentGroups");

                    b.Navigation("StudentSections");
                });

            modelBuilder.Entity("LSMS.Models.TeachingAssistant", b =>
                {
                    b.Navigation("courseTeachingAssistants");

                    b.Navigation("professorTeachingAssistants");

                    b.Navigation("sections");
                });
#pragma warning restore 612, 618
        }
    }
}
